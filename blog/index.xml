<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on blog</title>
    <link>/blog/</link>
    <description>Recent content in Blogs on blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 Jan 2022 09:45:52 +0800</lastBuildDate><atom:link href="/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hugo个人博客设计</title>
      <link>/blog/hugo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Fri, 07 Jan 2022 09:45:52 +0800</pubDate>
      
      <guid>/blog/hugo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%AE%BE%E8%AE%A1/</guid>
      <description>鸽了好久的个人博客，今天个人博客1.0终于正式完工上线了，采用了hugo搭建工具，自己设计并开发的个人科技风格主题和博客系统功能，也是踩了无数的坑，修复了n多的bug，不过总算完成了（分辨率和浏览器适配制作了一部分），尽管由于博客构建工具的限制，现在这款主题还不完善，适配和功能性都没达到最初理想的那个程度，但是作为初版个人用的博客已经非常不错了，所以拿出来交流分享一下，借此共同学习共同进步
设计尺寸：1920*1080 介绍页 博客demo体验地址： 点击跳转 https://ceichaox.github.io/CC.io/ 
主题开源地址-GitHub： 点击跳转 https://github.com/Ceichaox/hugo-theme-CC 
使用手册：
直接使用主题包内的-config中的代码替换hugo原本的config进行设置
1.代码开源
2.Apache许可
3.使用代码请注明原作者
4.建议使用谷歌浏览器进行浏览，最后请大家多多支持</description>
    </item>
    
    <item>
      <title>Hugo博客个性化主题开发踩坑记录（一）</title>
      <link>/blog/hugo%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%9D%91%E8%AE%B0%E5%BD%951/</link>
      <pubDate>Fri, 07 Jan 2022 09:45:52 +0800</pubDate>
      
      <guid>/blog/hugo%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%9D%91%E8%AE%B0%E5%BD%951/</guid>
      <description>个性化博客主题开坑记录，哎嘿(๑•̀ㅂ•́)و✧
博文分类
分页面进行展示
新建空白主题
主题下，模板分类存放
文件夹下再分类
创建文章
设置博文归属
title: &amp;#34;blog1&amp;#34; date: 2022-01-06T15:44:53+08:00 draft: false series: blog 列表页模板对应博文文件夹名称
单页文章模板使用默认名称
Config.Toml里主页路径配置
[menu] name=&amp;#34;首页&amp;#34; url=&amp;#34;/&amp;#34; weight=&amp;#34;1&amp;#34; [[menu.main]] name=&amp;#34;工作&amp;#34; url=&amp;#34;/work/&amp;#34; weight=&amp;#34;2&amp;#34; [[menu.main]] name=&amp;#34;博文&amp;#34; url=&amp;#34;/blog/&amp;#34; weight=&amp;#34;3&amp;#34; 分类配置
# Project series [params.project] # MMD series [params.mmd] # blog series [params.blog] 输出
[outputs] home = [&amp;#34;HTML&amp;#34;, &amp;#34;RSS&amp;#34;, &amp;#34;JSON&amp;#34;] 主页
检索blog相关文件夹下内容，并跳转
&amp;lt;h1&amp;gt; Page &amp;lt;/h1&amp;gt; {{ range where .Pages &amp;#34;Section&amp;#34; &amp;#34;blog&amp;#34; }} &amp;lt;div&amp;gt; &amp;lt;a href=&amp;#34;{{.Permalink}}&amp;#34;&amp;gt;{{.Title}}&amp;lt;/a&amp;gt; &amp;lt;/div&amp;gt; {{ end }} 列表页</description>
    </item>
    
    <item>
      <title>Hugo博客个性化主题开发踩坑记录（二）</title>
      <link>/blog/hugo%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%9D%91%E8%AE%B0%E5%BD%952/</link>
      <pubDate>Fri, 07 Jan 2022 09:45:52 +0800</pubDate>
      
      <guid>/blog/hugo%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%9D%91%E8%AE%B0%E5%BD%952/</guid>
      <description>实现threejs做的一个有趣的旋转小特效 创建球体并设置地球纹理
//earth  var earthgeometry = new THREE.SphereGeometry(100,100,100); var texture = new THREE.TextureLoader().load( &amp;#39;./image/ditu6.png&amp;#39; ); var earthmaterial = new THREE.MeshBasicMaterial({ color: 0xffffff, // 设置颜色纹理贴图：Texture对象作为材质map属性的属性值  map: texture, side: THREE.DoubleSide, transparent: true, }); var earth = new THREE.Mesh(earthgeometry, earthmaterial); scene.add(earth); 创建旋转函数
function rotatequest(){ setInterval(function (){ var sk = document.getElementById(&amp;#39;test&amp;#39;).scrollTop; //绑定对应id元素滑动像素值  var rk = 0.05;//设定滑动速率  earth.rotation.set(0,rk*sk,0);//绕y轴旋转  renderer.render(scene, camera); } ,30); //调用旋转函数
rotatequest(); 看下效果 </description>
    </item>
    
    <item>
      <title>Photoshop CEP扩展倒角插件</title>
      <link>/blog/photoshopcep%E6%89%A9%E5%B1%95%E5%80%92%E8%A7%92%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Fri, 07 Jan 2022 09:45:52 +0800</pubDate>
      
      <guid>/blog/photoshopcep%E6%89%A9%E5%B1%95%E5%80%92%E8%A7%92%E6%8F%92%E4%BB%B6/</guid>
      <description>还在为怎么制作炫酷的可视化作品发愁么？
如果你想要制作更有科技感的作品，不妨试试这款插件吧！ 他能帮助你快速实现倒角，提高你的工作效率
个人写的工作用ps扩展插件，需要的同学取用随意
Photoshop Cep 扩展开源插件，基于conner editor 进行cep环境移植，修改了部分逻辑和算法，优化了界面表现
使用方法 将压缩包解压后放入以下路径C:\Program Files (x86)\Common Files\Adobe\CEP\extensions
重启ps，从窗口&amp;gt;扩展中打开
！！！！因为此插件并未进行ps正规的签名打包
因此插件出现未签署报错情况请查看此篇文档
点击跳转 https://www.didixk.com/6748.html 
项目开源地址： 点击跳转 https://gitee.com/Ceichaos/Corner-tool 
本插件免费开源，支持一下吧</description>
    </item>
    
    <item>
      <title>代码实现ps切换工具</title>
      <link>/blog/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0ps%E5%88%87%E6%8D%A2%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Fri, 07 Jan 2022 09:45:52 +0800</pubDate>
      
      <guid>/blog/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0ps%E5%88%87%E6%8D%A2%E5%B7%A5%E5%85%B7/</guid>
      <description>在下最近在研究制作ps的扩展插件，由于工作原因，设计使用ps较多，但是手动处理倒角还是比较麻烦，所以想开发了一款倒角用的小扩展插件，减少一下工作量，到网上找了些有关ps插件制作的教程，先实现一下ps的一个工具切换的小功能
要求：点击切换ps使用工具
Ps插件扩展制作教程可以看这篇文档 点击跳转 http://nullice.com/archives/1795 
调试工具：adobe extendscript toolkit CC
选中ps，贴jsx代码运行调试
Jsx代码 function creatrectangle(){ (function select_51773071()	//创建函数  { try { var d = new ActionDescriptor(); var r = new ActionReference(); r.putClass(stringIDToTypeID(&amp;#34;rectangleTool&amp;#34;));//矩形工具选中  d.putReference(stringIDToTypeID(&amp;#34;null&amp;#34;), r); d.putBoolean(stringIDToTypeID(&amp;#34;dontRecord&amp;#34;), true); d.putBoolean(stringIDToTypeID(&amp;#34;forceNotify&amp;#34;), true); executeAction(stringIDToTypeID(&amp;#34;select&amp;#34;), d, DialogModes.NO); } catch (e) { if (e.number!=8007) { alert(&amp;#34;Line: &amp;#34;+e.line+&amp;#34;\n\n&amp;#34;+e,&amp;#34;Bug!&amp;#34;,true); throw(e); } } } )(); } 这时候， 在ps程序中就可以看到工具切换到矩形工具了
那其他工具要怎么才能切换呢
可以根据ps中的对应命令来更换工具代码，这样就可以实现工具的切换选择
如果找不到对应的代码可以用监听器对ps进行监听，找到对应的工具id也是可以实现的
通过ps官方监听器
或者
都可以对ps中的命令进行监听，并反馈
Ps中的命令可以查看这篇文档 点击跳转 https://gitee.com/code_yu/photoshop-javascript#layercomps-layercomps 
如果想要制作一个在ps中切换工具的cep扩展插件应该怎么做</description>
    </item>
    
    <item>
      <title>用于web展示的智慧农业植物生长动画模型的快速实现</title>
      <link>/blog/%E7%94%A8%E4%BA%8Eweb%E5%B1%95%E7%A4%BA%E7%9A%84%E6%99%BA%E6%85%A7%E5%86%9C%E4%B8%9A%E6%A4%8D%E7%89%A9%E7%94%9F%E9%95%BF%E5%8A%A8%E7%94%BB%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%BF%AB%E9%80%9F%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 07 Jan 2022 09:45:52 +0800</pubDate>
      
      <guid>/blog/%E7%94%A8%E4%BA%8Eweb%E5%B1%95%E7%A4%BA%E7%9A%84%E6%99%BA%E6%85%A7%E5%86%9C%E4%B8%9A%E6%A4%8D%E7%89%A9%E7%94%9F%E9%95%BF%E5%8A%A8%E7%94%BB%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%BF%AB%E9%80%9F%E5%AE%9E%E7%8E%B0/</guid>
      <description>在下最近在进行智慧农业的项目过程中对有关植物生长的动画模型做了一番研究，最后把植物生长的过程在web页面进行展示，并进行控制，实现项目需求主要使用的工具是c4d和unity
先来解析一下植物生长动画模型的难点，首先植物生长动画是区别于其他几种模型动画的，常见的几种分类动画：
骨骼动画一般是完整模型加以绑定骨骼特征，然后通过控制骨骼对包括人物或其他事物模型进行运动模拟处理，从而形成动画，使人物动起来，类似mmd这种
粒子动画是通过粒子发生器生成粒子并进行一定的处理，从而把无形物变为有形物使之运动，生成动画，类似特效火，风，雷电，水都可以用粒子来生成粒子动画实现
运动动画是比较简单的动画，通过物体进行控制缩放，平移，旋转，透明等等特征操作，实现物体的运动，类似发动机动画就是通过齿轮传动运动来模拟进行动画演示
而植物生长动画总体来说其实是一种比较特殊的动画实现，他的实现方式更趋近于多边形（面或物体）随时间轴运动进行特征形变，且从时间轴的开始到结束，形变几乎是一直存在的
我们都知道几乎极大多数的生物都遵循类似这样的一条s生长曲线
因此，我们借助这种曲线来对植物生长进行模拟
其实对于实现植物生长动画还有一些其他的方式可以实现，但在下是通过c4d来进行实现的
众所周知，c4d有一款非常好用的植物模型插件forester，专门用于影视中植物的制作，功能性堪比专门用于游戏引擎植物建模的软件speedtree
他的库里有很多预设的模型
这里要说明一下，如果你的c4d使用的是中文，这个插件的自带的材质是加载不出来的，切换成英文可以正常显示，但是最好是用他自带的灰模，然后自己做材质，因为他自带的材质有一些问题，表现上也达不到想要的要求，所以最好用它的灰模自己附材质文件
这里还要说明一下，他的实现方式连接的，什么意思呢，没接触过这个插件的同学可能不知道，以小麦为例，就是艹是可以没有的，但是果实必须链接到穗，穗必须链接到茎，你想要单做果实生长的模型动画的话需要把连接的穗和茎缩小到最小才可以
另外这个插件控制的是模型的预设值，如果想要近景镜头可能模型达不到你想要的要求，那你就只能用植物工厂或者高级建模工具一点点建了，我使用c4d就是因为这一套植物生长动画模型做下来是相当快的（因为有预设）
然后调整插件，控制植物生长调控grow global（全局生长），设定好时间轴，打好关键帧
然后调控好植物生长的动画，进行预览
各方面完成后，导出.abc文件
众所周知，untiy是一款相当强大的软件，而里面的官方abc格式插件能对abc动画进行控制和处理，
首先确保你的unity里加载了alembic插件
新建一个new timeline
添加alembic track
然后把你的abc模型动画直接绑到时间轴上
更改scale，c4d导出abc的时候默认的是1，在unity里看不到的话需要放大
拉长动画区域，调整时间节点，确保在unity里能看到生长动画
然后从c4d里把你做好的材质导出（因为unity加载abc是不带材质的），然后把材质绑到模型上预览
需要注意的是如果你想要把模型精细化，更加详细的体现作物生长，你需要把建模在c4d里拆成多个部分，建立多个生长动画，并合成一个abc，或者导出多个abc在unity里整合都可以，这样可以保证每个模型部分都有单独的材质和模型生长动画，如果只是想快速出图，只要简单的部分就可以，那只需要在unity里把模型附加简单的材质就可以导出进行web展示了
建议把模型动画差分成多个动画，再放到untiy里整合，因为插件的问题，整合为一个abc的话untiy有识别不了多边形的情况
个人用插件传送门 点击跳转 https://download.csdn.net/download/Cei_Chaos/60839976</description>
    </item>
    
    <item>
      <title>设计/前端 关于AE动画/特效web实现的四种方法</title>
      <link>/blog/%E8%AE%BE%E8%AE%A1%E5%89%8D%E7%AB%AF%E5%85%B3%E4%BA%8Eae%E5%8A%A8%E7%94%BB%E7%89%B9%E6%95%88web%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E6%B3%95/</link>
      <pubDate>Fri, 07 Jan 2022 09:45:52 +0800</pubDate>
      
      <guid>/blog/%E8%AE%BE%E8%AE%A1%E5%89%8D%E7%AB%AF%E5%85%B3%E4%BA%8Eae%E5%8A%A8%E7%94%BB%E7%89%B9%E6%95%88web%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E6%B3%95/</guid>
      <description>1.通过动图/视频来实现 如果你是设计师，并且熟练的运用Photoshop，那你一定对混合图层非常熟悉，他是实现两种图层消除颜色差值的一种快速实现方法，当然在web网页上也存在像Photoshop中的图层逻辑和混合模式，通过css代码可以实现网页中的图片和文字、视频等元素的图层堆叠，你可以把一种元素放置到另一种元素的上方，并且可以调节混合模式blend-mode来做到和Photoshop的混合图层一样的效果，通过这种方式，我们可以通过ae来制作合适的特效或动画效果，把我们所制作的效果放到网页当中，通过混合模式来消除ae所生成的颜色背景，从而达到与网页背景相融合，实现网页特效的目的。
mix-blend-mode:screen Ae所生成的动画特效都是附带颜色背景的，无论是动图gif还是视频，网所以页设计者在进行这种实现的时候，往往一开始要进行合理的具体规划，保证ae动画特效的背景颜色与网页主体颜色保持一直或相近，才能达到完美消除底色。
但鉴于网页中的混合模式相比于Photoshop的混合方式要少，尤其是当如果出现两种颜色差距较大背景在网页中切换时，覆盖在之上的动画特效往往会出现底色，与原有的颜色形成不协调的色差，导致明显的感官差异，因此在使用视频和动图特效过程中，网页的整体颜色协调和网页的交互模式都需要提前应对处理和规划。
抛开各种格式的视频，Gif动图本身也存在一定的缺陷，无法实现透明过渡，色彩表现清晰度也比较低。
AE在生成包括MP4的各种视频格式时，往往自身的设置属性无法达到，所以经常通过ME进行各种视频的详细调整和导出，其中AVI格式的视频，可以通过携带alpha通道导出，在导入Photoshop时，会自动生成无背景视频，但在网页使用过程中，鉴于视频播放器的问题，总会生成一层默认黑色背景，当网页加载AVI时也要通过其他的插件支持，导致本身并不能进行透明背景的输出，背景必然存在。
2.通过json数据/svga来实现 通过数据的方式实现动画和特效，关于AE通过插件导出json和svga数据，两者基本一样，都需要通过绑定js来进行加载实现，都可以把图层信息转换成数据进行储存，再通过加载器来进行动画特效的播放和控制。
AE中有专门的对应json和svga格式的导出插件，通过设置导出，把ae中的图层信息和动画信息转化成文本数据，再通过调用Lottie.js和svga.js就可以再网页当中实现无背景存在的特效和动画。
这里着重说明一下在下使用Lottie.js，可以通过设置导出带有图片的文件和json代码，并在网页中进行调用，也可以直接包含图形信息到数据，只生成json文件，直接调用一个json就可以实现，甚至可以直接生成html和css源代码，只用纯css和html就能完成动画特效的实现。
可以加载alpha通道，表明可以实现动画特效的颜色背景输出和无背景动画输出，因为可以转换信息到数据，因此json文件需要自带的json播放器才能查看导出效果，或者直接加载到网页当中也可以观看导出效果。
关于压缩方面，视频和动图可以用合适的工具进行相应的格式压缩，数据文件则要压缩调整好后进行生成，要在生成动画效果后调整好大小，清晰度等参数，再通过插件进行导出json文件，这样才能控制好动效数据的大小，没有办法进行后期对json数据进行压缩。
3.APNG/WebP新图片格式 通过新型的的图片格式生成透明背景的动画特效，近几年兴起的新型图片格式，在原先的图片格式上可以进行时间轴播放，支持alpha通道，透明和渐变过渡，老式图片格式的升级版，经过几年的发展，在浏览器的兼容性上已经适配了不少的主流浏览器，但无论那种新图片格式，相比于其他动效实现方式在网页上的兼容性还是表现的差一些。
兼容问题参考此篇文档
点击跳转 https://blog.csdn.net/weixin_44369568/article/details/101458255 
在下只使用过APNG，WebP没用过，所以不做说明，网页特效可以通过AE制作，并生成png序列帧或iff等带有alpha透明序列帧，再通过isparta工具把序列帧导出为APNG动图，或通过其他方式转化成APNG，也可以生成无背景的动画特效。
关于APNG的生成，Isparta工具不怎么好用，会报错和卡死，维护也相当弱，工具存在bug问题，（明明生成报错失败了，文件下还是会生成带有isparta后缀的APNG，可以正常播放和使用，gif选项导出不了等）APNG格式相当于是整个png动画序列通过Photoshop加入时间轴调整后，再进行整合的一个文件包格式，体积是整个png序列，甚至更大。
压缩相对困难，除去ispata自带的压缩工具，其他没有对应的兼容工具可以使用，如果要进行压缩，只能像数据格式一样，需要先对png序列进行处理，压缩和调整，在进行生成。
4.Css/Js纯代码实现 按照设计者制作的ae特效演示用纯代码实现，通过css和js代码进行动画特效的实现，二维动画的实现有animation.js等，三维的动画实现有three.js等，还有都两者沾一点的echarts.js和echarts-gl.js。
可以直接通过代码的方式直接生成，也可以通过把AE动画拆分成对应的动画组件或者图片，通过css进行时间移动，透明度变换等，将动画进行组合，从而生成动画特效，效果实现代码和逻辑比较复杂，需要经过大量调整，控制度最高，代码可调节。
其中threejs的使用生成会带有颜色场景和灯光，同动图一样，使用前需要对网页的交互效果实现进行规划，防止出现过渡色差的那种不协调感
体积比较 </description>
    </item>
    
    <item>
      <title>TEST-用css实现矩形扩散动画效果制作一个简约科技按钮</title>
      <link>/blog/test-%E7%94%A8css%E5%AE%9E%E7%8E%B0%E7%9F%A9%E5%BD%A2%E6%89%A9%E6%95%A3%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E7%AE%80%E7%BA%A6%E7%A7%91%E6%8A%80%E6%8C%89%E9%92%AE/</link>
      <pubDate>Thu, 06 Jan 2022 15:44:53 +0800</pubDate>
      
      <guid>/blog/test-%E7%94%A8css%E5%AE%9E%E7%8E%B0%E7%9F%A9%E5%BD%A2%E6%89%A9%E6%95%A3%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E7%AE%80%E7%BA%A6%E7%A7%91%E6%8A%80%E6%8C%89%E9%92%AE/</guid>
      <description>测试目的：用css实现矩形扩散动画效果简单实现一个简约科技按钮
前几天在网上找漂亮的功能组件时看见有人用css实现圆形的具有波纹扩散动画效果的按钮，效果挺好看的，但是作为设计作者觉得矩形的过渡棱角科技感更饱满一些，所以作者借助这种思路用css简单的实现了一个矩形扩散的按钮运用在自己的项目中，顺便拿出来分享一下思路。
解决对象是按下的前后的一个动画的变化效果
当按钮按下时光环会从贴近按钮的边缘向外扩散，然后消失，给人一种科技波纹的效果
这里附上代码
.button { width: 50px; height: 50px; display: inline-block; background: linear-gradient(45deg,#00eaff,#006aff) ; color: #fff; border-radius: 5px; border: none; cursor: pointer; position: relative; box-shadow: 0 2px 25px rgba(0, 234, 250, 0.5); outline: 0; } .button:active { transform: scale(0.95); box-shadow: 0 2px 25px rgba(0, 234, 255, 0.5); } .button::before{ width: 45px; height: 45px; border-radius: 5px; border: 2px solid rgba(0, 234, 250, 0.5); position:absolute; z-index: -1; content: &amp;#39;&amp;#39;; left: 0px; right: 0px; top: 0px; bottom: 0px; animation: bubble 0.</description>
    </item>
    
  </channel>
</rss>
